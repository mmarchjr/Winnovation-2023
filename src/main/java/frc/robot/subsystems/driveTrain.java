// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
 import com.ctre.phoenix.motorcontrol.FeedbackDevice;
 import com.ctre.phoenix.motorcontrol.NeutralMode;
 import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX leftMotor;
private WPI_TalonSRX rightMotor;
private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public driveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftMotor = new WPI_TalonSRX(1);
 
    /* Factory default hardware to prevent unexpected behavior */
leftMotor.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
leftMotor.setInverted(true);
leftMotor.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
leftMotor.configNominalOutputForward(0, 30);
leftMotor.configNominalOutputReverse(0, 30);
leftMotor.configPeakOutputForward(1, 30);
leftMotor.configPeakOutputReverse(-1, 30);
        











        

rightMotor = new WPI_TalonSRX(2);
 
    /* Factory default hardware to prevent unexpected behavior */
rightMotor.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
rightMotor.setInverted(false);
rightMotor.setNeutralMode(NeutralMode.Coast);

        /* Set the peak and nominal outputs */
rightMotor.configNominalOutputForward(0, 30);
rightMotor.configNominalOutputReverse(0, 30);
rightMotor.configPeakOutputForward(1, 30);
rightMotor.configPeakOutputReverse(-1, 30);
        











        

differentialDrive = new DifferentialDrive(leftMotor, rightMotor);
 addChild("Differential Drive",differentialDrive);
 differentialDrive.setSafetyEnabled(true);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void Drive(double speed, double turn) {
        differentialDrive.arcadeDrive(speed, turn);
    };

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

